***************
UShER Wiki
***************

Welcome to the manual for UShER, MAT Utils, and other related SARS-CoV-2 Phylogenetics tools.

=================
Programs
=================
* UShER_
* matUtils_
* Others_



.. _UShER:


UShER
=================

.. image:: usher_logo.png
    :width: 500px
    :align: center

UShER is a program for rapid, accurate placement of samples to existing phylogenies. Information on installation, usage, and features can be found `here <https://usher-wiki.readthedocs.io/en/latest/UShER.html>`_. Our manuscript about UShER can be found `here <https://www.biorxiv.org/content/10.1101/2020.09.26.314971v1.abstract>`_.



.. _matUtils:


matUtils
============

matUtils is a set of tools to be used for analyses relating to **m**\ utation\  **a**\ nnotated\  **t**\ rees, such as the protobuf (.pb) files used in UShER. 

-----------
Input
-----------

matUtils takes as an input a mutation-annotated tree file generated by UShER.

-----------
Options
-----------

-i: Input mutation-annotated tree file. (**REQUIRED**)

-v: Output VCF file.

-t: Output Newick tree file.

-n: Do not include sample genotype columns in VCF output (used only with -v).

-p: Calculate and store total tree parsimony.

-e: Calculate and store equally parsimonious placements for all samples in the tree.

-s: Use to mask specific samples from the tree.

-h: Print help message.


-----------
Usage
-----------

An example usage of matUtils:  

`./build/matUtils -i global_assignments.pb -v global_assignments.vcf -t global_assignments.nh`

-----------
Output
-----------

The above example command generates a VCF file named `global_assignments.vcf` and the output tree named `global_assignments.nh`.




.. _Others:


Strain Phylogenetics Package
================================

We have developed several auxiliary tools for phylogenetic analysis, which are stored `here <https://github.com/yatisht/strain_phylogenetics>`_

----------
RotTrees
----------

RotTrees enables quick inference of congruence of tanglegrams. This is particularly useful for SARS-CoV-2 phylogenomics due to multiple groups independently analyzing data-sets with many identical samples. Previous tanglegram visualization software, such as `cophylo <ttps://www.rdocumentation.org/packages/phytools/versions/0.7-20/topics/cophylo>`_ and `Dendroscope3 <http://dendroscope.org/>`_ rely on fewer rotations to minimize crossings over, which is inadequate for phylogenies on the scale of SARS-CoV-2. We implemented a quick heuristic to produce vastly improved tanglegrams.

`./build/rotate_trees --T1 tree/pruned-sumtree-for-cog.nh --T2 tree/pruned-cog-for-sumtree.nh --T1_out rot-pruned-sumtree-for-cog.nh --T2_out rot-pruned-cog-for-sumtree.nh`

The above command produces rotated trees (rot-pruned-cog-for-sumtree.nh and rot-pruned-sumtree-for-cog.nh) with a much improved tanglegram as seen below (images generated with the help of `cophylo <https://www.rdocumentation.org/packages/phytools/versions/0.7-20/topics/cophylo>`_, setting rotate to FALSE).

.. image:: tanglegrams_comparison.png
    :width: 700px
    :align: center

Below is a GIF of approximately 20 frames showing various operations of the tree rotation algorithm operating on a much larger pair of trees (~4k leaves)

.. image:: rotation.gif
    :width: 700px
    :align: center

----------
TreeMerge
----------

`python3 scripts/tree_merge.py -T1 tree/pruned-sumtree-for-cog.nh -T2 tree/pruned-cog-for-sumtree.nh -symmetric 1 -T_out symm-merged-sumtree-cog.nh`

The above command produces a merged tree (*symm-merged-sumtree-cog.nh*) from two input trees (*pruned-sumtree-for-cog.nh* and *pruned-cog-for-sumtree.nh*) that is maximally resolved and compatible with both input trees (refer to our `manuscript <https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1009175>`_ for more details). Below are the resulting tanglegrams of the resulting merged tree with the two input trees (after applying tree rotation). The above command can also be used without the symmetric flag for its asymmetric version (where the first input tree is given a priority to resolve the merged tree) or using the intersectOnly flag that produces a simple consensus of the two input trees.  

.. image:: merged.png
    :width: 700px
    :align: center

----------------------------------------
Identify and plot extremal sites
----------------------------------------

`python3 scripts/identify_extremal_sites.py -in pruned-sumtree-for-cog_PARSIMONY.txt`

The above command can be used for identifying and flagging extremal sites i.e. sites having exceptional parsimony scores relative to their allele frequencies and therefore also suspected to contain systematic errors. The above command identifies 6 extremal sites (C11074T, C27046T, T13402G, A3778G, G24390C, G26144T) with a phylogenetic instability value of 3.03. For the precise definition of extremal sites and phylogenetic instability, refer to our manuscript referenced at the bottom. The code also provides an ability to ignore high-frequency C\>T and G\>T mutations using optional flags

`python3 scripts/identify_extremal_sites.py -in pruned-sumtree-for-cog_PARSIMONY.txt -ignoreCtoT=1 -ignoreGtoT=1`

The above command identifies three extremal sites (T13402G, A3778G, G24390C) with a phylogenetic instability value of 2.32. To create a figure requires `installing R <https://docs.rstudio.com/resources/install-r/>`_ and the `plyr package <https://www.rdocumentation.org/packages/plyr>`_.

`python3 scripts/generate_plot_extremal_sites_data.py -in pruned-sumtree-for-cog_PARSIMONY.txt > plot_extremal_sites_data.txt`

The above commands create raw input data for the extremal sites plot.

`Rscript --vanilla scripts/plot_parsimony.r plot_extremal_sites_data.txt extremal_sites_plot.pdf`

Next, the R command accepts the generated data and creates a log(allele count) by parsimony plot for all variant sites in a given vcf. It produces three plots, one of all data, one ignoring C>U mutations and one ignoring C>U and G>U mutations, as shown below.

.. image:: extremal.png
    :width: 700px
    :align: center


.. toctree::
   :hidden:

   index.rst
   UShER.rst
   Presentations.rst
   Publications.rst